// ER diagram for RC Models store (BigER / .erd syntax)
erdiagram RC_Models

notation=crowsfoot

/*
  This ER model is authored from the user's provided entity list and business rules.
  It follows the bigER syntax from `bigER_Agent_Context.md` and uses Crow's Foot notation.

  Notes / assumptions made (minimal):
  - IDs are modeled as INTEGER keys where an explicit PK was provided.
  - Some attributes (like website, on_hand) have common datatypes for clarity.
  - Composite key for Inventory uses model_id + decal_id.
  - Invoice is used to represent a completed Transaction (per the supplied rules).
*/

// ------------------ Entities ------------------
entity Customer {
    customer_id: INTEGER key
}

entity Product {
    model_id: INTEGER key
    minimum: INTEGER
    manufacturer_id: INTEGER
    // manufacturer_id is a FK to Manufacturer.manufacturer_id
}

entity Inventory {
  model_id: INTEGER key
  decal_id: INTEGER key
  on_hand: INTEGER
  // composite key: model_id + decal_id
}

entity BackOrder {
    order_id: INTEGER key
    customer_id: INTEGER
    model: STRING
    decal: STRING
    // customer_id is a FK to Customer.customer_id
}

entity FineMagazineSubscription {
  subscription_id: INTEGER key
  // subscription details may be added later
}

entity RC_Customer_List {
  list_id: INTEGER key
  // list of RC customers; attributes to be added as required
}

entity Invoice {
    invoice_id: INTEGER key
    customer_id: INTEGER
    cart_id: INTEGER
    // customer_id FK -> Customer.customer_id
    // cart_id FK -> ShoppingCart.cart_id
}

entity ShoppingCart {
    cart_id: INTEGER key
    customer_id: INTEGER
    // cart holds products (see relationship Cart_Contains)
}

entity Manufacturer {
    manufacturer_id: INTEGER key
    website: VARCHAR(200)
}

entity Prospect {
    prospect_id: INTEGER key
}

// ------------------ Relationships & Business Rules ------------------

/*
  Customer & Invoice
  - A customer may generate many invoices.
  - Each invoice is generated by only one customer.
  - Some customers have not (yet) generated an invoice.
*/
relationship Invoice_Generated_By {
    Invoice[N | "invoice"] -> Customer[1 | "customer"]
}

/*
  Customer & ShoppingCart/Transaction
  - A customer can have one shopping cart (0..1).
  - Each transaction is created by one customer.
  - The database will use Invoice to represent a completed Transaction.
*/
relationship Customer_Has_Cart {
    Customer[0..1 | "customer"] -> ShoppingCart[0..1 | "cart"]
}

/*
  ShoppingCart -> Invoice
  - Each shopping cart creates one invoice (1:1)
  - Each invoice comes from one shopping cart (1:1)
*/
relationship Cart_Creates_Invoice {
    ShoppingCart[1 | "cart"] -> Invoice[1 | "invoice"]
}

/*
  ShoppingCart & BackOrder
  - A shopping cart can create zero to many backorders.
  - Each backorder is created by one shopping cart.
*/
relationship BackOrder_Created_By {
    BackOrder[1 | "backorder"] -> ShoppingCart[0..N | "cart"]
}

/*
  Product & Inventory
  - An inventory has multiple products (Inventory contains Products).
  - Product identified by model_id is the main unit of inventory.
*/
relationship Inventory_Contains {
    Inventory[1 | "inventory"] -> Product[0..N | "product"]
}

/*
  Manufacturer & Product
  - Each product has a manufacturer (product.manufacturer_id FK)
  - A manufacturer can have 0 to many products
*/
relationship Manufactures {
    Manufacturer[0..N | "manufacturer"] -> Product[1 | "product"]
}

/*
  ShoppingCart contains Products (cart items)
  - A cart can contain zero to many products
  - A product can appear in zero to many carts (many-to-many logical); keep as N:N relationship
    For a physical DB, a bridging entity (CartItem) would be recommended. Here we show the conceptual relation.
*/
relationship Cart_Contains {
    ShoppingCart[1 | "cart"] -> Product[0..N | "product"]
}

/*
  BackOrder & Customer
  - Each backorder is associated with one customer
*/
relationship BackOrder_For_Customer {
    BackOrder[N | "backorder"] -> Customer[1 | "customer"]
}

/*
  Additional notes:
  - Prospect: stores potential customers from publications; when a Prospect makes a purchase,
    their data may be moved into Customer per the business rules.
  - Customer payment details are handled externally and are not stored here.
*/
